技巧9 构造可重复的修改

Vim对重复操作进行了优化，要利用这一点，我们必须考虑该如何构造修改。

在Vim中，要完成一件事，总是有不止一种方式。在评估哪种方式最好时，最显而易见的指标时效率，即哪种手段需要的按键次数最少(又名VimGolf)。然而，在平局时该如何选择获胜者呢？

在下例中，假设光标位于行尾处的字符"h"上，而我们想要删除单词"nigh":
The end is nigh

反向删除:因为光标已经位于单词末尾，我们可以先反向删除该词
db  删除从光标起始位置到单词开头的内容，但会原封不动地留下最后一个字符"h"
x   删除“h”字符

这样整改操作的Vim高尔夫得分时3分

正向删除
b   把光标移动到单词的开头
dw  删掉整改单词

这一次的Vim高尔夫得分也是3分

删除整个单词：使用更精准的aw文本对象(text object)
daw "delete nigh a word"


决胜局：哪种方式具有重复性？
我们尝试了三种不同的方式来删除一个词：dbx,dbw以及daw。每种情况的Vim高尔夫得分都是3分

反向删除和正向删除方案都包含两步操作。不满足.范式
最后一个方案：daw，这个操作不仅删除了该单词，还会删除一个空格，因此光标最终会停留在单词"is"的最后一个字符上。如果此时我们使用.命令，它会重复上次删除单词的命令。这一次.命令会做真正有用的事情(.==daw)

结论
daw可以发挥.命令的最大威力，本轮获胜！

养成使修改可重复的习惯
