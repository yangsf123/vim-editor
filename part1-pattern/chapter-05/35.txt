技巧35   运行shell命令


不用离开Vim就能方便地调用外部程序。我们还可以把缓冲区的内容作为标准输入发送给一个外部命令，或是把外部命令的标准输出导入到缓冲区里。


执行shell中的程序
在Vim的命令行模式中，给命令加一个叹号前缀就可以调用外部程序.例::!ls

:!ls        调用shell中的ls命令
:ls         调用Vim的内置命令，用来显示缓冲区列表的内容

在Vim的命令行中，符号%代表当前文件名。在运行那些操作当前文件的外部命令时，我们可以使用它。
例如，无果我们正在编辑某个Ruby文件，那么可以用下面的方式执行此文件:!ruby %

Vim也提供了一组文件名修饰符，让我们可以从当前文件名中提取出诸如文件路径或扩展名之类的信息。
:!{cmd} 一次性执行命令
如果想在shell中执行几条命令要怎么做?
:shell
pwd
ls
exit

:shell命令时Vim提供的一个功能，它可以让我们切换到一个交互shell中。但是，如果Vim自身是在终端运行的话，那么我们也能直接访问终端内置的shell命令。例如，bash shell支持作业控制，让我们可以暂停一个作业，把它放到后台，然后在稍后某个时间再把它们跳回前台继续运行。

假设我们正在bash shell中运行Vim，然后需要执行一些shell命令。我们可以按住<C-z>挂起Vim所属的进程，并把控制权交还给bash。此时Vim进程在后台处于挂起状态，让我们可以像往常一样与bash会话进行交互。

在bash中我们使用fg命令唤醒一个呗挂起的作业，把它移到前台.


把缓冲区内容作为标准输入或输出
在用:!{cmd}时，Vim会回显{cmd}命令的输出。
:read !{cmd}命令,把{cmd}命令的标准输出重定向到缓冲区。
:write !{cmd}命令则做相反的事，它把缓冲区内容作为指定{cmd}的标准输入

根据叹号在命令行上的位置不同，它的含义也不大相同
:write !sh
:write ! sh
:write! sh


结论
    在Vim中操作时，我们能很方便地调用shell命令。下表选取了最有用的一些调用外部命令的方式:
    
    命令            用途
    :shell          启动一个shell(输入exit返回vim)
    :!{cmd}         在shell中执行{cmd}
    :read !{cmd}    在shell中执行{cmd},并把其标准输出插入到光标下方
    :[range]write !{cmd}    在shell中执行{cmd}，以[range]作为其标准输入
    :[range]!{filter}   使用外部程序{filter}过滤指定的[range]
